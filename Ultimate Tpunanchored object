-- Load Rayfield
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

-- Create UI window
local Window = Rayfield:CreateWindow({
   Name = "Ultimate Tpunanchored Object | By Gab tv",
   Icon = 0,
   LoadingTitle = "Ultimate Tpua",
   LoadingSubtitle = "by Gabon tv",
   Theme = "Default",
   ToggleUIKeybind = "K",
   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false,
   ConfigurationSaving = {
      Enabled = false,
      FolderName = nil,
      FileName = "Big Hub"
   },
   Discord = {
      Enabled = false,
      Invite = "noinvitelink",
      RememberJoins = true
   },
   KeySystem = false,
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided",
      FileName = "Key",
      SaveKey = true,
      GrabKeyFromSite = false,
      Key = {"Hello"}
   }
})

-- Create main tab
local Tab = Window:CreateTab("Main", 4483362458)

-- Game services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local LocalPlayer = Players.LocalPlayer

-- Settings
local attractionStrength = 1000
local maxDistance = 50000
local ringPartsEnabled = true
local targetPlayer = nil

-- Button to toggle attraction
local Button = Tab:CreateButton({
   Name = "Tp Object [Toggle]",
   Callback = function()
      ringPartsEnabled = not ringPartsEnabled
      Rayfield:Notify({
         Title = "Teleport Toggle",
         Content = ringPartsEnabled and "Object attraction enabled!" or "Object attraction disabled.",
         Duration = 4.5,
         Image = 0,
         Actions = {
            Ignore = {
               Name = "Okay!",
               Callback = function() end,
            },
         },
      })
   end,
})

-- Input field to choose player target (optional use)
local Input = Tab:CreateInput({
   Name = "Choose Target",
   CurrentValue = "",
   PlaceholderText = "Username",
   RemoveTextAfterFocusLost = false,
   Flag = "",
   Callback = function(Text)
      local foundPlayer = Players:FindFirstChild(Text)
      if foundPlayer then
         targetPlayer = foundPlayer
         Rayfield:Notify({
            Title = "Target Set",
            Content = "Now targeting: " .. foundPlayer.Name,
            Duration = 3,
         })
      else
         Rayfield:Notify({
            Title = "Player Not Found",
            Content = "Could not find player: " .. Text,
            Duration = 3,
         })
      end
   end,
})

-- Part filtering logic
local function RetainPart(part)
	if part:IsA("BasePart") and not part.Anchored and part:IsDescendantOf(Workspace) then
		if part:IsDescendantOf(LocalPlayer.Character) then return false end
		part.CustomPhysicalProperties = PhysicalProperties.new(0, 0, 0, 0, 0)
		part.CanCollide = false
		return true
	end
	return false
end

local parts = {}

local function addPart(part)
	if RetainPart(part) and not table.find(parts, part) then
		table.insert(parts, part)
	end
end

local function removePart(part)
	local index = table.find(parts, part)
	if index then
		table.remove(parts, index)
	end
end

-- Populate initial parts
for _, part in ipairs(Workspace:GetDescendants()) do
	addPart(part)
end

-- Track added/removed parts
Workspace.DescendantAdded:Connect(addPart)
Workspace.DescendantRemoving:Connect(removePart)

-- Ring-style velocity attraction
RunService.Heartbeat:Connect(function()
	if not ringPartsEnabled then return end

	local character = targetPlayer.Character
	local rootPart = character and character:FindFirstChild("HumanoidRootPart")
	if not rootPart then return end

	local center = rootPart.Position

	for _, part in ipairs(parts) do
		if part and part.Parent and not part.Anchored then
			local pos = part.Position
			local direction = center - pos
			local distance = direction.Magnitude

			if distance <= maxDistance and distance > 0.1 then
				part.Velocity = direction.Unit * attractionStrength
			else
				part.Velocity = Vector3.zero
			end
		end
	end
end)

-- Constant pulling with BodyPosition
local frozenParts = {}
local excludedNames = {
	["Torso"] = true,
	["Head"] = true,
	["Right Arm"] = true,
	["Left Arm"] = true,
	["Right Leg"] = true,
	["Left Leg"] = true,
	["HumanoidRootPart"] = true
}

local function pullPartsToPlayer()
	local character = targetPlayerCharacter
	if not character or not character:FindFirstChild("Head") then return end

	local headPosition = character.Head.Position

	for _, part in pairs(workspace:GetDescendants()) do
		if part:IsA("BasePart") and not part.Anchored and not part:IsDescendantOf(character) then
			local distance = (part.Position - headPosition).Magnitude
			if distance <= maxDistance and not excludedNames[part.Name] then
				for _, child in pairs(part:GetChildren()) do
					if child:IsA("BodyPosition") or child:IsA("BodyGyro") then
						child:Destroy()
					end
				end

				local forceInstance = Instance.new("BodyPosition")
				forceInstance.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
				forceInstance.Position = headPosition
				forceInstance.P = 1250
				forceInstance.D = 100
				forceInstance.Parent = part

				if not table.find(frozenParts, part) then
					table.insert(frozenParts, part)
				end
			end
		end
	end
end

-- Pull loop
task.spawn(function()
	while true do
		if ringPartsEnabled then
			pullPartsToPlayer()
		end
		task.wait(0.3)
	end
end)
