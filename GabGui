-- DEBUG FLAG
local debugX = true

if debugX then
	warn('Initialising GabGui')
end

-- SERVICES
local function getService(name)
	local service = game:GetService(name)
	return cloneref and cloneref(service) or service
end

local HttpService = getService('HttpService')
local RunService = getService('RunService')
local useStudio = RunService:IsStudio()

-- REQUEST WITH TIMEOUT
local function loadWithTimeout(url: string, timeout: number?)
	assert(type(url) == "string", "Expected string, got " .. type(url))
	timeout = timeout or 5

	local requestCompleted, success, result = false, false, nil

	local requestThread = task.spawn(function()
		local ok, content = pcall(game.HttpGet, game, url)
		if not ok or #content == 0 then
			result = (#content == 0 and "Empty response" or content)
			success = false
			requestCompleted = true
			return
		end
		local execOk, execResult = pcall(loadstring(content))
		success, result = execOk, execResult
		requestCompleted = true
	end)

	local timeoutThread = task.delay(timeout, function()
		if not requestCompleted then
			warn(("Request for %s timed out after %d seconds"):format(url, timeout))
			task.cancel(requestThread)
			result = "Request timed out"
			requestCompleted = true
		end
	end)

	while not requestCompleted do task.wait() end
	if coroutine.status(timeoutThread) ~= "dead" then task.cancel(timeoutThread) end

	if not success then
		warn(("Failed to process %s: %s"):format(url, tostring(result)))
	end

	return success and result or nil
end

-- SETTINGS
local requestsDisabled = true
local InterfaceBuild = '3K3W'
local Release = "Build 1.68"
local GabGuiFolder = "GabGui"
local ConfigurationFolder = GabGuiFolder.."/Configurations"
local ConfigurationExtension = ".rfld"

local settingsTable = {
	General = {
		GabGuiOpen = { Type = 'bind', Value = 'K', Name = 'GabGui Keybind' },
	},
	System = {
		usageAnalytics = { Type = 'toggle', Value = true, Name = 'Anonymised Analytics' }
	}
}

local overriddenSettings = {}
local function overrideSetting(category, name, value)
	overriddenSettings[("%s.%s"):format(category, name)] = value
end

local function getSetting(category, name)
	local key = ("%s.%s"):format(category, name)
	if overriddenSettings[key] ~= nil then
		return overriddenSettings[key]
	elseif settingsTable[category][name] ~= nil then
		return settingsTable[category][name].Value
	end
end

if requestsDisabled then
	overrideSetting("System", "usageAnalytics", false)
end

-- SETTINGS LOADER
local cachedSettings
local settingsCreated = false
local settingsInitialized = false

local function loadSettings()
	task.spawn(function()
		local file
		if useStudio then
			file = [[
				{"General":{"GabGuiOpen":{"Value":"K","Type":"bind","Name":"GabGui Keybind"}},"System":{"usageAnalytics":{"Value":false,"Type":"toggle","Name":"Anonymised Analytics"}}}
			]]
		elseif isfolder and isfolder(GabGuiFolder) and isfile and isfile(GabGuiFolder..'/settings'..ConfigurationExtension) then
			file = readfile(GabGuiFolder..'/settings'..ConfigurationExtension)
		end

		if file then
			local success, decoded = pcall(HttpService.JSONDecode, HttpService, file)
			cachedSettings = success and decoded or {}
		else
			cachedSettings = {}
		end

		if settingsCreated then
			for catName, cat in pairs(settingsTable) do
				if cachedSettings[catName] then
					for setName, set in pairs(cat) do
						if cachedSettings[catName][setName] then
							set.Value = cachedSettings[catName][setName].Value
							if set.Element then
								set.Element:Set(getSetting(catName, setName))
							end
						end
					end
				end
			end
		end
		settingsInitialized = true
	end)
end

if debugX then warn('Now Loading Settings Configuration') end
loadSettings()
if debugX then warn('Settings Loaded') end

-- THEMES
local GabGuiLibrary = {
	Flags = {},
	Theme = {
		Default = {
			TextColor = Color3.fromRGB(240, 240, 240),
			Background = Color3.fromRGB(25, 25, 25),
			Topbar = Color3.fromRGB(34, 34, 34),
			Shadow = Color3.fromRGB(20, 20, 20),
			NotificationBackground = Color3.fromRGB(20, 20, 20),
			NotificationActionsBackground = Color3.fromRGB(230, 230, 230),
			TabBackground = Color3.fromRGB(80, 80, 80),
			TabStroke = Color3.fromRGB(85, 85, 85),
			TabBackgroundSelected = Color3.fromRGB(210, 210, 210),
			TabTextColor = Color3.fromRGB(240, 240, 240),
			SelectedTabTextColor = Color3.fromRGB(50, 50, 50),
			ElementBackground = Color3.fromRGB(35, 35, 35),
			ElementBackgroundHover = Color3.fromRGB(40, 40, 40),
			SecondaryElementBackground = Color3.fromRGB(25, 25, 25),
			ElementStroke = Color3.fromRGB(50, 50, 50),
			SecondaryElementStroke = Color3.fromRGB(40, 40, 40),
			SliderBackground = Color3.fromRGB(50, 138, 220),
			SliderProgress = Color3.fromRGB(50, 138, 220),
			SliderStroke = Color3.fromRGB(58, 163, 255),
			ToggleBackground = Color3.fromRGB(30, 30, 30),
			ToggleEnabled = Color3.fromRGB(0, 146, 214),
			ToggleDisabled = Color3.fromRGB(100, 100, 100),
			ToggleEnabledStroke = Color3.fromRGB(0, 170, 255),
			ToggleDisabledStroke = Color3.fromRGB(125, 125, 125),
			ToggleEnabledOuterStroke = Color3.fromRGB(100, 100, 100),
			ToggleDisabledOuterStroke = Color3.fromRGB(65, 65, 65),
			DropdownSelected = Color3.fromRGB(40, 40, 40),
			DropdownUnselected = Color3.fromRGB(30, 30, 30),
			InputBackground = Color3.fromRGB(30, 30, 30),
			InputStroke = Color3.fromRGB(65, 65, 65),
			PlaceholderColor = Color3.fromRGB(178, 178, 178)
		},
		-- other themes follow same structure...
	}
}

-- Services
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local CoreGui = game:GetService("CoreGui")
local GuiService = game:GetService("GuiService")
local HttpService = game:GetService("HttpService")

-- Interface Management
local GabGui = useStudio and script.Parent:FindFirstChild("GabGui") or game:GetObjects("rbxassetid://10804731440")[1]
local buildAttempts, correctBuild, warned = 0, false, nil
local globalLoaded, GabGuiDestroyed = nil, false -- True when GabGuiLibrary:Destroy() is called

repeat
	if GabGui:FindFirstChild("Build") and GabGui.Build.Value == InterfaceBuild then
		correctBuild = true
		break
	end

	correctBuild = false

	if not warned then
		warn("GabGui | Build Mismatch")
		print("GabGui may encounter issues: running incompatible interface version (".. ((GabGui:FindFirstChild("Build") and GabGui.Build.Value) or "No Build") .."). Expected build: "..InterfaceBuild..".")
		warned = true
	end

	local toDestroy = GabGui
	GabGui = useStudio and script.Parent:FindFirstChild("GabGui") or game:GetObjects("rbxassetid://10804731440")[1]
	if toDestroy and not useStudio then toDestroy:Destroy() end

	buildAttempts += 1
until buildAttempts >= 2

GabGui.Enabled = false

-- Parent assignment
if gethui then
	GabGui.Parent = gethui()
elseif syn and syn.protect_gui then
	syn.protect_gui(GabGui)
	GabGui.Parent = CoreGui
elseif not useStudio then
	GabGui.Parent = CoreGui:FindFirstChild("RobloxGui") or CoreGui
end

-- Disable old instances
local function disableOldInstances(parent)
	for _, iface in ipairs(parent:GetChildren()) do
		if iface.Name == GabGui.Name and iface ~= GabGui then
			iface.Enabled = false
			iface.Name = "GabGui-Old"
		end
	end
end

if gethui then
	disableOldInstances(gethui())
elseif not useStudio then
	disableOldInstances(CoreGui)
end

-- Sizing flags
local minSize = Vector2.new(1024, 768)
local useMobileSizing = GabGui.AbsoluteSize.X < minSize.X and GabGui.AbsoluteSize.Y < minSize.Y
local useMobilePrompt = UserInputService.TouchEnabled

-- Object variables
local Main = GabGui.Main
local MPrompt = GabGui:FindFirstChild("Prompt")
local Topbar = Main.Topbar
local Elements = Main.Elements
local LoadingFrame = Main.LoadingFrame
local TabList = Main.TabList
local dragBar = GabGui:FindFirstChild("Drag")
local dragInteract = dragBar and dragBar.Interact
local dragBarCosmetic = dragBar and dragBar.Drag

local dragOffset, dragOffsetMobile = 255, 150
GabGui.DisplayOrder = 100
LoadingFrame.Version.Text = Release

-- Lucide Icons
local Icons = useStudio and require(script.Parent.icons) or loadWithTimeout("https://raw.githubusercontent.com/SiriusSoftwareLtd/GabGui/refs/heads/main/icons.lua")

-- State variables
local CFileName, CEnabled, Minimised, Hidden, Debounce, searchOpen = nil, false, false, false, false, false
local Notifications = GabGui.Notifications
local SelectedTheme = GabGuiLibrary.Theme.Default

-- Purple Dark Glow Theme Setter
local function ChangeTheme(Theme)
	if typeof(Theme) == "string" then
		SelectedTheme = GabGuiLibrary.Theme[Theme]
	elseif typeof(Theme) == "table" then
		SelectedTheme = Theme
	end

	-- Main Colors
	Main.BackgroundColor3 = SelectedTheme.Background
	Topbar.BackgroundColor3 = SelectedTheme.Topbar
	Topbar.CornerRepair.BackgroundColor3 = SelectedTheme.Topbar
	Main.Shadow.Image.ImageColor3 = SelectedTheme.Shadow

	-- Topbar Icons
	Topbar.ChangeSize.ImageColor3 = SelectedTheme.TextColor
	Topbar.Hide.ImageColor3 = SelectedTheme.TextColor
	Topbar.Search.ImageColor3 = SelectedTheme.TextColor
	if Topbar:FindFirstChild("Settings") then
		Topbar.Settings.ImageColor3 = SelectedTheme.TextColor
		Topbar.Divider.BackgroundColor3 = SelectedTheme.ElementStroke
	end

	-- Search
	Main.Search.BackgroundColor3 = SelectedTheme.TextColor
	Main.Search.Shadow.ImageColor3 = SelectedTheme.TextColor
	Main.Search.Search.ImageColor3 = SelectedTheme.TextColor
	Main.Search.Input.PlaceholderColor3 = SelectedTheme.TextColor
	Main.Search.UIStroke.Color = SelectedTheme.SecondaryElementStroke

	-- Notice
	if Main:FindFirstChild("Notice") then
		Main.Notice.BackgroundColor3 = SelectedTheme.Background
	end

	-- Texts
	for _, text in ipairs(GabGui:GetDescendants()) do
		if text.Parent.Parent ~= Notifications then
			if text:IsA("TextLabel") or text:IsA("TextBox") then
				text.TextColor3 = SelectedTheme.TextColor
			end
		end
	end

	-- Elements
	for _, TabPage in ipairs(Elements:GetChildren()) do
		for _, Element in ipairs(TabPage:GetChildren()) do
			if Element.ClassName == "Frame" and not table.find({"Placeholder", "SectionSpacing", "Divider", "SectionTitle", "SearchTitle-fsefsefesfsefesfesfThanks"}, Element.Name) then
				Element.BackgroundColor3 = SelectedTheme.ElementBackground
				Element.UIStroke.Color = SelectedTheme.ElementStroke
			end
		end
	end
end


function GabGuiLibrary:Notify(data)
	task.spawn(function()
		local newNotification = Notifications.Template:Clone()
		newNotification.Name = data.Title or "No Title Provided"
		newNotification.Parent = Notifications
		newNotification.LayoutOrder = #Notifications:GetChildren()
		newNotification.Visible = false

		-- Set content
		newNotification.Title.Text = data.Title or "Unknown Title"
		newNotification.Description.Text = data.Content or "Unknown Content"

		if data.Image then
			if typeof(data.Image) == "string" and Icons then
				local asset = getIcon(data.Image)
				newNotification.Icon.Image = "rbxassetid://"..asset.id
				newNotification.Icon.ImageRectOffset = asset.imageRectOffset
				newNotification.Icon.ImageRectSize = asset.imageRectSize
			else
				newNotification.Icon.Image = getAssetUri(data.Image)
			end
		else
			newNotification.Icon.Image = "rbxassetid://0"
		end

		-- Theme
		newNotification.Title.TextColor3 = SelectedTheme.TextColor
		newNotification.Description.TextColor3 = SelectedTheme.TextColor
		newNotification.BackgroundColor3 = SelectedTheme.Background
		newNotification.UIStroke.Color = SelectedTheme.TextColor
		newNotification.Icon.ImageColor3 = SelectedTheme.TextColor

		newNotification.BackgroundTransparency = 1
		newNotification.Title.TextTransparency = 1
		newNotification.Description.TextTransparency = 1
		newNotification.UIStroke.Transparency = 1
		newNotification.Shadow.ImageTransparency = 1
		newNotification.Size = UDim2.new(1, 0, 0, 800)
		newNotification.Icon.ImageTransparency = 1
		newNotification.Icon.BackgroundTransparency = 1

		task.wait()
		newNotification.Visible = true

		if data.Actions then
			warn("GabGui | Notification actions are currently disabled.")
		end

		local bounds = {newNotification.Title.TextBounds.Y, newNotification.Description.TextBounds.Y}
		newNotification.Size = UDim2.new(1, -60, 0, -Notifications:FindFirstChild("UIListLayout").Padding.Offset)
		newNotification.Icon.Size = UDim2.new(0, 32, 0, 32)
		newNotification.Icon.Position = UDim2.new(0, 20, 0.5, 0)

		TweenService:Create(newNotification, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {Size = UDim2.new(1, 0, 0, math.max(bounds[1] + bounds[2] + 31, 60))}):Play()
		task.wait(0.15)

		TweenService:Create(newNotification, TweenInfo.new(0.4, Enum.EasingStyle.Exponential), {BackgroundTransparency = 0.45}):Play()
		TweenService:Create(newNotification.Title, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {TextTransparency = 0}):Play()
		task.wait(0.05)

		TweenService:Create(newNotification.Icon, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {ImageTransparency = 0}):Play()
		task.wait(0.05)

		TweenService:Create(newNotification.Description, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {TextTransparency = 0.35}):Play()
		TweenService:Create(newNotification.UIStroke, TweenInfo.new(0.4, Enum.EasingStyle.Exponential), {Transparency = 0.95}):Play()
		TweenService:Create(newNotification.Shadow, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {ImageTransparency = 0.82}):Play()

		local waitDuration = math.min(math.max((#newNotification.Description.Text * 0.1) + 2.5, 3), 10)
		task.wait(data.Duration or waitDuration)

		newNotification.Icon.Visible = false
		TweenService:Create(newNotification, TweenInfo.new(0.4, Enum.EasingStyle.Exponential), {BackgroundTransparency = 1}):Play()
		TweenService:Create(newNotification.UIStroke, TweenInfo.new(0.4, Enum.EasingStyle.Exponential), {Transparency = 1}):Play()
		TweenService:Create(newNotification.Shadow, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {ImageTransparency = 1}):Play()
		TweenService:Create(newNotification.Title, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {TextTransparency = 1}):Play()
		TweenService:Create(newNotification.Description, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {TextTransparency = 1}):Play()
		TweenService:Create(newNotification, TweenInfo.new(1, Enum.EasingStyle.Exponential), {Size = UDim2.new(1, -90, 0, 0)}):Play()
		task.wait(1)
		TweenService:Create(newNotification, TweenInfo.new(1, Enum.EasingStyle.Exponential), {Size = UDim2.new(1, -90, 0, -Notifications:FindFirstChild("UIListLayout").Padding.Offset)}):Play()
		newNotification.Visible = false
		newNotification:Destroy()
	end)
end

-- Search Functions
local function openSearch()
	searchOpen = true
	local S = Main.Search
	S.BackgroundTransparency = 1
	S.Shadow.ImageTransparency = 1
	S.Input.TextTransparency = 1
	S.Search.ImageTransparency = 1
	S.UIStroke.Transparency = 1
	S.Size = UDim2.new(1, 0, 0, 80)
	S.Position = UDim2.new(0.5, 0, 0, 70)
	S.Input.Interactable = true
	S.Visible = true

	for _, tabbtn in ipairs(TabList:GetChildren()) do
		if tabbtn.ClassName == "Frame" and tabbtn.Name ~= "Placeholder" then
			tabbtn.Interact.Visible = false
			TweenService:Create(tabbtn, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {BackgroundTransparency = 1}):Play()
			TweenService:Create(tabbtn.Title, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {TextTransparency = 1}):Play()
			TweenService:Create(tabbtn.Image, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {ImageTransparency = 1}):Play()
			TweenService:Create(tabbtn.UIStroke, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {Transparency = 1}):Play()
		end
	end

	S.Input:CaptureFocus()
	TweenService:Create(S.Shadow, TweenInfo.new(0.05, Enum.EasingStyle.Quint), {ImageTransparency = 0.95}):Play()
	TweenService:Create(S, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {Position = UDim2.new(0.5, 0, 0, 57), BackgroundTransparency = 0.9}):Play()
	TweenService:Create(S.UIStroke, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {Transparency = 0.8}):Play()
	TweenService:Create(S.Input, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {TextTransparency = 0.2}):Play()
	TweenService:Create(S.Search, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {ImageTransparency = 0.5}):Play()
	TweenService:Create(S, TweenInfo.new(0.5, Enum.EasingStyle.Exponential), {Size = UDim2.new(1, -35, 0, 35)}):Play()
end

local function closeSearch()
	searchOpen = false
	local S = Main.Search
	TweenService:Create(S, TweenInfo.new(0.35, Enum.EasingStyle.Quint), {BackgroundTransparency = 1, Size = UDim2.new(1, -55, 0, 30)}):Play()
	TweenService:Create(S.Search, TweenInfo.new(0.15, Enum.EasingStyle.Quint), {ImageTransparency = 1}):Play()
	TweenService:Create(S.Shadow, TweenInfo.new(0.15, Enum.EasingStyle.Quint), {ImageTransparency = 1}):Play()
	TweenService:Create(S.UIStroke, TweenInfo.new(0.15, Enum.EasingStyle.Quint), {Transparency = 1}):Play()
	TweenService:Create(S.Input, TweenInfo.new(0.15, Enum.EasingStyle.Quint), {TextTransparency = 1}):Play()

	for _, tabbtn in ipairs(TabList:GetChildren()) do
		if tabbtn.ClassName == "Frame" and tabbtn.Name ~= "Placeholder" then
			tabbtn.Interact.Visible = true
			if tostring(Elements.UIPageLayout.CurrentPage) == tabbtn.Title.Text then
				TweenService:Create(tabbtn, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {BackgroundTransparency = 0}):Play()
				TweenService:Create(tabbtn.Image, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {ImageTransparency = 0}):Play()
				TweenService:Create(tabbtn.Title, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {TextTransparency = 0}):Play()
				TweenService:Create(tabbtn.UIStroke, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {Transparency = 1}):Play()
			else
				TweenService:Create(tabbtn, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {BackgroundTransparency = 0.7}):Play()
				TweenService:Create(tabbtn.Image, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {ImageTransparency = 0.2}):Play()
				TweenService:Create(tabbtn.Title, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {TextTransparency = 0.2}):Play()
				TweenService:Create(tabbtn.UIStroke, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {Transparency = 0.5}):Play()
			end
		end
	end

	S.Input.Text = ""
	S.Input.Interactable = false
end

function GabGuiLibrary:CreateWindow(Settings)
    local TweenService = game:GetService("TweenService")
    local Players = game:GetService("Players")
    local player = Players.LocalPlayer

    -- Basic setup
    GabGui.Enabled = true
    Main.Size = UDim2.new(0, 420, 0, 100)
    Main.Visible = true
    Main.BackgroundTransparency = 1
    Topbar.Title.Text = Settings.Name or "GabGui"
    Elements.Template.Visible = false
    Notifications.Template.Visible = false
    Notifications.Visible = true

    -- Purple glow for all UI frames
    local function addPurpleGlow(Frame)
        if Frame:FindFirstChild("UIStroke") then
            Frame.UIStroke.Color = Color3.fromRGB(148, 0, 211) -- deep purple
            Frame.UIStroke.Thickness = 2
            Frame.UIStroke.Transparency = 0.3
            Frame.UIStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
        end
    end

    -- Draggable Main Window
    makeDraggable(Main, Topbar, false, {dragOffset, dragOffsetMobile})

    -- Tween Main Window in
    TweenService:Create(Main, TweenInfo.new(0.7, Enum.EasingStyle.Exponential), {BackgroundTransparency = 0}):Play()
    TweenService:Create(Main.Shadow.Image, TweenInfo.new(0.7, Enum.EasingStyle.Exponential), {ImageTransparency = 0.6}):Play()

    -- Create Tabs
    local FirstTab
    local Window = {}
    function Window:CreateTab(Name, Image)
        local TabButton = TabList.Template:Clone()
        TabButton.Name = Name
        TabButton.Title.Text = Name
        TabButton.Parent = TabList
        TabButton.BackgroundTransparency = 1
        TabButton.Title.TextTransparency = 1
        TabButton.Image.ImageTransparency = 1
        TabButton.UIStroke.Transparency = 1
        addPurpleGlow(TabButton)

        -- Tab Page
        local TabPage = Elements.Template:Clone()
        TabPage.Name = Name
        TabPage.Visible = true
        TabPage.Parent = Elements

        -- First Tab auto-select
        if not FirstTab then
            FirstTab = TabButton
            Elements.UIPageLayout:JumpTo(TabPage)
            TabButton.BackgroundColor3 = SelectedTheme.TabBackgroundSelected
            TabButton.Title.TextColor3 = SelectedTheme.SelectedTabTextColor
        end

        -- Tab click logic
        TabButton.Interact.MouseButton1Click:Connect(function()
            Elements.UIPageLayout:JumpTo(TabPage)
            for _, OtherTab in ipairs(TabList:GetChildren()) do
                if OtherTab.ClassName == "Frame" then
                    OtherTab.BackgroundColor3 = SelectedTheme.TabBackground
                    OtherTab.Title.TextColor3 = SelectedTheme.TabTextColor
                end
            end
            TabButton.BackgroundColor3 = SelectedTheme.TabBackgroundSelected
            TabButton.Title.TextColor3 = SelectedTheme.SelectedTabTextColor
        end)

        -- Return Tab for adding Buttons
        local Tab = {}

        -- Buttons inside Tab
        function Tab:CreateButton(ButtonSettings)
            local Button = Elements.Template.Button:Clone()
            Button.Name = ButtonSettings.Name
            Button.Title.Text = ButtonSettings.Name
            Button.Parent = TabPage
            Button.BackgroundTransparency = 1
            Button.UIStroke.Transparency = 1
            Button.Title.TextTransparency = 1
            addPurpleGlow(Button)

            -- Tween in
            TweenService:Create(Button, TweenInfo.new(0.7, Enum.EasingStyle.Exponential), {BackgroundTransparency = 0}):Play()
            TweenService:Create(Button.UIStroke, TweenInfo.new(0.7, Enum.EasingStyle.Exponential), {Transparency = 0.3}):Play()
            TweenService:Create(Button.Title, TweenInfo.new(0.7, Enum.EasingStyle.Exponential), {TextTransparency = 0}):Play()

            -- Button click
            Button.Interact.MouseButton1Click:Connect(function()
                local Success, Response = pcall(ButtonSettings.Callback)
                if not Success then
                    print("Callback Error:", Response)
                    Button.Title.Text = "Error"
                    task.wait(0.5)
                    Button.Title.Text = ButtonSettings.Name
                else
                    TweenService:Create(Button, TweenInfo.new(0.3), {BackgroundColor3 = SelectedTheme.ElementBackgroundHover}):Play()
                    task.wait(0.2)
                    TweenService:Create(Button, TweenInfo.new(0.3), {BackgroundColor3 = SelectedTheme.ElementBackground}):Play()
                end
            end)

            -- Hover animations
            Button.MouseEnter:Connect(function()
                TweenService:Create(Button, TweenInfo.new(0.3), {BackgroundColor3 = SelectedTheme.ElementBackgroundHover}):Play()
            end)
            Button.MouseLeave:Connect(function()
                TweenService:Create(Button, TweenInfo.new(0.3), {BackgroundColor3 = SelectedTheme.ElementBackground}):Play()
            end)
        end

        return Tab
    end

    return Window
end

function Tab:CreateColorPicker(ColorPickerSettings)
    local ColorPicker = Elements.Template.ColorPicker:Clone()
    local Background = ColorPicker.CPBackground
    local Display = Background.Display
    local Main = Background.MainCP
    local Slider = ColorPicker.ColorSlider
    local TweenService = game:GetService("TweenService")
    local mouse = Players.LocalPlayer:GetMouse()

    ColorPicker.Name = ColorPickerSettings.Name
    ColorPicker.Title.Text = ColorPickerSettings.Name
    ColorPicker.Visible = true
    ColorPicker.Parent = TabPage
    ColorPicker.Size = UDim2.new(1, -10, 0, 45)

    -- Apply purple glow helper
    local function addPurpleGlow(Frame)
        if Frame:FindFirstChild("UIStroke") then
            Frame.UIStroke.Color = Color3.fromRGB(148, 0, 211)
            Frame.UIStroke.Thickness = 2
            Frame.UIStroke.Transparency = 0.3
            Frame.UIStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
        end
    end

    -- Apply purple glow to main parts
    addPurpleGlow(ColorPicker)
    addPurpleGlow(Background)
    addPurpleGlow(Main)
    addPurpleGlow(Slider)

    -- Initialize colors
    local h, s, v = ColorPickerSettings.Color:ToHSV()
    local opened, mainDragging, sliderDragging = false, false, false

    -- Display updater
    local function setDisplay()
        Main.MainPoint.Position = UDim2.new(s, -Main.MainPoint.AbsoluteSize.X/2, 1-v, -Main.MainPoint.AbsoluteSize.Y/2)
        Main.MainPoint.ImageColor3 = Color3.fromHSV(h, s, v)
        Display.BackgroundColor3 = Color3.fromHSV(h, s, v)
        Background.BackgroundColor3 = Color3.fromHSV(h, 1, 1)
        local x = h * Slider.AbsoluteSize.X
        Slider.SliderPoint.Position = UDim2.new(0, x - Slider.SliderPoint.AbsoluteSize.X/2, 0.5, 0)
        Slider.SliderPoint.ImageColor3 = Color3.fromHSV(h, 1, 1)
        local color = Color3.fromHSV(h, s, v)
        ColorPicker.RGB.RInput.InputBox.Text = tostring(math.floor(color.R*255+0.5))
        ColorPicker.RGB.GInput.InputBox.Text = tostring(math.floor(color.G*255+0.5))
        ColorPicker.RGB.BInput.InputBox.Text = tostring(math.floor(color.B*255+0.5))
        ColorPicker.HexInput.InputBox.Text = string.format("#%02X%02X%02X", color.R*255, color.G*255, color.B*255)
    end

    setDisplay()

    -- Toggle open/close
    ColorPicker.Interact.MouseButton1Down:Connect(function()
        opened = not opened
        if opened then
            TweenService:Create(ColorPicker, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {Size = UDim2.new(1, -10, 0, 120)}):Play()
            TweenService:Create(Background, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {Size = UDim2.new(0, 173, 0, 86), BackgroundTransparency = 0}):Play()
            TweenService:Create(Main.MainPoint, TweenInfo.new(0.2, Enum.EasingStyle.Exponential), {ImageTransparency = 0}):Play()
        else
            TweenService:Create(ColorPicker, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {Size = UDim2.new(1, -10, 0, 45)}):Play()
            TweenService:Create(Background, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {Size = UDim2.new(0, 39, 0, 22), BackgroundTransparency = 1}):Play()
            TweenService:Create(Main.MainPoint, TweenInfo.new(0.2, Enum.EasingStyle.Exponential), {ImageTransparency = 1}):Play()
        end
    end)

    -- Dragging logic
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            mainDragging = false
            sliderDragging = false
        end
    end)

    Main.MouseButton1Down:Connect(function()
        if opened then mainDragging = true end
    end)
    Main.MainPoint.MouseButton1Down:Connect(function()
        if opened then mainDragging = true end
    end)
    Slider.MouseButton1Down:Connect(function() sliderDragging = true end)
    Slider.SliderPoint.MouseButton1Down:Connect(function() sliderDragging = true end)

    -- RenderStepped updates
    RunService.RenderStepped:Connect(function()
        if mainDragging then
            local localX = math.clamp(mouse.X - Main.AbsolutePosition.X, 0, Main.AbsoluteSize.X)
            local localY = math.clamp(mouse.Y - Main.AbsolutePosition.Y, 0, Main.AbsoluteSize.Y)
            s = localX / Main.AbsoluteSize.X
            v = 1 - (localY / Main.AbsoluteSize.Y)
            setDisplay()
            pcall(function() ColorPickerSettings.Callback(Color3.fromHSV(h, s, v)) end)
        end
        if sliderDragging then
            local localX = math.clamp(mouse.X - Slider.AbsolutePosition.X, 0, Slider.AbsoluteSize.X)
            h = localX / Slider.AbsoluteSize.X
            setDisplay()
            pcall(function() ColorPickerSettings.Callback(Color3.fromHSV(h, s, v)) end)
        end
    end)

    -- Mouse hover glow
    ColorPicker.MouseEnter:Connect(function()
        TweenService:Create(ColorPicker, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {BackgroundColor3 = SelectedTheme.ElementBackgroundHover}):Play()
    end)
    ColorPicker.MouseLeave:Connect(function()
        TweenService:Create(ColorPicker, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {BackgroundColor3 = SelectedTheme.ElementBackground}):Play()
    end)

    -- Set function for external updates
    function ColorPickerSettings:Set(RGBColor)
        ColorPickerSettings.Color = RGBColor
        h, s, v = RGBColor:ToHSV()
        setDisplay()
    end

    return ColorPickerSettings
end

function Tab:CreateSection(SectionName)
    local SectionValue = {}

    if SDone then
        local SectionSpace = Elements.Template.SectionSpacing:Clone()
        SectionSpace.Visible = true
        SectionSpace.Parent = TabPage
    end

    local Section = Elements.Template.SectionTitle:Clone()
    Section.Title.Text = SectionName
    Section.Visible = true
    Section.Parent = TabPage

    -- Purple glow
    if Section:FindFirstChild("UIStroke") then
        Section.UIStroke.Color = Color3.fromRGB(148, 0, 211)
        Section.UIStroke.Thickness = 2
        Section.UIStroke.Transparency = 0.3
        Section.UIStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
    end

    Section.Title.TextTransparency = 1
    TweenService:Create(Section.Title, TweenInfo.new(0.7, Enum.EasingStyle.Exponential), {TextTransparency = 0.4}):Play()

    function SectionValue:Set(NewSection)
        Section.Title.Text = NewSection
    end

    SDone = true
    return SectionValue
end

function Tab:CreateDivider()
    local DividerValue = {}

    local Divider = Elements.Template.Divider:Clone()
    Divider.Visible = true
    Divider.Parent = TabPage

    -- Purple glow
    if Divider:FindFirstChild("UIStroke") then
        Divider.UIStroke.Color = Color3.fromRGB(148, 0, 211)
        Divider.UIStroke.Thickness = 2
        Divider.UIStroke.Transparency = 0.3
        Divider.UIStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
    end

    Divider.Divider.BackgroundTransparency = 1
    TweenService:Create(Divider.Divider, TweenInfo.new(0.5, Enum.EasingStyle.Exponential), {BackgroundTransparency = 0.85}):Play()

    function DividerValue:Set(Value)
        Divider.Visible = Value
    end

    return DividerValue
end

function Tab:CreateLabel(LabelText : string, Icon: number, Color : Color3, IgnoreTheme : boolean)
    local LabelValue = {}
    local Label = Elements.Template.Label:Clone()
    Label.Title.Text = LabelText
    Label.Visible = true
    Label.Parent = TabPage

    -- Purple glow
    if Label:FindFirstChild("UIStroke") then
        Label.UIStroke.Color = Color3.fromRGB(148, 0, 211)
        Label.UIStroke.Thickness = 2
        Label.UIStroke.Transparency = 0.3
        Label.UIStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
    end

    Label.BackgroundColor3 = Color or SelectedTheme.SecondaryElementBackground
    Label.Title.TextTransparency = 1
    Label.BackgroundTransparency = 1

    -- Existing icon logic remains
    if Icon then
        Label.Icon.Visible = true
        -- set image logic...
    end

    -- Fade-in tweens
    TweenService:Create(Label, TweenInfo.new(0.7, Enum.EasingStyle.Exponential), {BackgroundTransparency = Color and 0.8 or 0}):Play()
    TweenService:Create(Label.UIStroke, TweenInfo.new(0.7, Enum.EasingStyle.Exponential), {Transparency = Color and 0.7 or 0}):Play()
    TweenService:Create(Label.Title, TweenInfo.new(0.7, Enum.EasingStyle.Exponential), {TextTransparency = Color and 0.2 or 0}):Play()

    function LabelValue:Set(NewLabel, Icon, Color)
        Label.Title.Text = NewLabel
        if Color then
            Label.BackgroundColor3 = Color
            Label.UIStroke.Color = Color
        end
    end

    GabGui.Main:GetPropertyChangedSignal('BackgroundColor3'):Connect(function()
        Label.BackgroundColor3 = IgnoreTheme and (Color or Label.BackgroundColor3) or SelectedTheme.SecondaryElementBackground
        Label.UIStroke.Color = IgnoreTheme and (Color or Label.BackgroundColor3) or SelectedTheme.SecondaryElementStroke
    end)

    return LabelValue
end

function Tab:CreateParagraph(ParagraphSettings)
    local ParagraphValue = {}

    local Paragraph = Elements.Template.Paragraph:Clone()
    Paragraph.Title.Text = ParagraphSettings.Title
    Paragraph.Content.Text = ParagraphSettings.Content
    Paragraph.Visible = true
    Paragraph.Parent = TabPage

    Paragraph.BackgroundTransparency = 1
    Paragraph.UIStroke.Transparency = 1
    Paragraph.Title.TextTransparency = 1
    Paragraph.Content.TextTransparency = 1

    Paragraph.BackgroundColor3 = SelectedTheme.SecondaryElementBackground

    -- Purple glow
    if Paragraph:FindFirstChild("UIStroke") then
        Paragraph.UIStroke.Color = Color3.fromRGB(148, 0, 211)
        Paragraph.UIStroke.Thickness = 2
        Paragraph.UIStroke.Transparency = 0.3
        Paragraph.UIStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
    end

    TweenService:Create(Paragraph, TweenInfo.new(0.7, Enum.EasingStyle.Exponential), {BackgroundTransparency = 0}):Play()
    TweenService:Create(Paragraph.UIStroke, TweenInfo.new(0.7, Enum.EasingStyle.Exponential), {Transparency = 0}):Play()
    TweenService:Create(Paragraph.Title, TweenInfo.new(0.7, Enum.EasingStyle.Exponential), {TextTransparency = 0}):Play()    
    TweenService:Create(Paragraph.Content, TweenInfo.new(0.7, Enum.EasingStyle.Exponential), {TextTransparency = 0}):Play()    

    function ParagraphValue:Set(NewParagraphSettings)
        Paragraph.Title.Text = NewParagraphSettings.Title
        Paragraph.Content.Text = NewParagraphSettings.Content
    end

    GabGui.Main:GetPropertyChangedSignal('BackgroundColor3'):Connect(function()
        Paragraph.BackgroundColor3 = SelectedTheme.SecondaryElementBackground
        if Paragraph:FindFirstChild("UIStroke") then
            Paragraph.UIStroke.Color = Color3.fromRGB(148, 0, 211)
        end
    end)

    return ParagraphValue
end

function Tab:CreateInput(InputSettings)
    local Input = Elements.Template.Input:Clone()
    Input.Name = InputSettings.Name
    Input.Title.Text = InputSettings.Name
    Input.Visible = true
    Input.Parent = TabPage

    Input.BackgroundTransparency = 1
    Input.UIStroke.Transparency = 1
    Input.Title.TextTransparency = 1

    Input.InputFrame.InputBox.Text = InputSettings.CurrentValue or ''

    Input.InputFrame.BackgroundColor3 = SelectedTheme.InputBackground

    -- Purple glow
    if Input.InputFrame:FindFirstChild("UIStroke") then
        Input.InputFrame.UIStroke.Color = Color3.fromRGB(148, 0, 211)
        Input.InputFrame.UIStroke.Thickness = 2
        Input.InputFrame.UIStroke.Transparency = 0.3
        Input.InputFrame.UIStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
    end

    TweenService:Create(Input, TweenInfo.new(0.7, Enum.EasingStyle.Exponential), {BackgroundTransparency = 0}):Play()
    TweenService:Create(Input.UIStroke, TweenInfo.new(0.7, Enum.EasingStyle.Exponential), {Transparency = 0}):Play()
    TweenService:Create(Input.Title, TweenInfo.new(0.7, Enum.EasingStyle.Exponential), {TextTransparency = 0}):Play()    

    Input.InputFrame.InputBox.PlaceholderText = InputSettings.PlaceholderText
    Input.InputFrame.Size = UDim2.new(0, Input.InputFrame.InputBox.TextBounds.X + 24, 0, 30)

    Input.InputFrame.InputBox.FocusLost:Connect(function()
        local Success, Response = pcall(function()
            InputSettings.Callback(Input.InputFrame.InputBox.Text)
            InputSettings.CurrentValue = Input.InputFrame.InputBox.Text
        end)

        if not Success then
            TweenService:Create(Input, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {BackgroundColor3 = Color3.fromRGB(85, 0, 0)}):Play()
            TweenService:Create(Input.UIStroke, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {Transparency = 1}):Play()
            Input.Title.Text = "Callback Error"
            task.wait(0.5)
            Input.Title.Text = InputSettings.Name
            TweenService:Create(Input, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {BackgroundColor3 = SelectedTheme.ElementBackground}):Play()
            TweenService:Create(Input.UIStroke, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {Transparency = 0.3}):Play()
        end

        if InputSettings.RemoveTextAfterFocusLost then
            Input.InputFrame.InputBox.Text = ""
        end

        if not InputSettings.Ext then
            SaveConfiguration()
        end
    end)

    Input.MouseEnter:Connect(function()
        TweenService:Create(Input, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {BackgroundColor3 = SelectedTheme.ElementBackgroundHover}):Play()
    end)

    Input.MouseLeave:Connect(function()
        TweenService:Create(Input, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {BackgroundColor3 = SelectedTheme.ElementBackground}):Play()
    end)

    Input.InputFrame.InputBox:GetPropertyChangedSignal("Text"):Connect(function()
        TweenService:Create(Input.InputFrame, TweenInfo.new(0.55, Enum.EasingStyle.Exponential, Enum.EasingDirection.Out), {Size = UDim2.new(0, Input.InputFrame.InputBox.TextBounds.X + 24, 0, 30)}):Play()
    end)

    function InputSettings:Set(text)
        Input.InputFrame.InputBox.Text = text
        InputSettings.CurrentValue = text
        pcall(function() InputSettings.Callback(text) end)
        if not InputSettings.Ext then
            SaveConfiguration()
        end
    end

    if Settings.ConfigurationSaving and Settings.ConfigurationSaving.Enabled and InputSettings.Flag then
        GabGuiLibrary.Flags[InputSettings.Flag] = InputSettings
    end

    GabGui.Main:GetPropertyChangedSignal('BackgroundColor3'):Connect(function()
        Input.InputFrame.BackgroundColor3 = SelectedTheme.InputBackground
        if Input.InputFrame:FindFirstChild("UIStroke") then
            Input.InputFrame.UIStroke.Color = Color3.fromRGB(148, 0, 211)
        end
    end)

    return InputSettings
end













