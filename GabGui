-- GabGui mini Rayfield-style clone (client-only)
local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local player = Players.LocalPlayer
local PlayerGui = player:WaitForChild("PlayerGui")

-- Theme (easy to tweak)
local THEME = {
    Background = Color3.fromRGB(25,25,30),
    Header = Color3.fromRGB(35,35,40),
    Accent = Color3.fromRGB(180,0,255),
    Button = Color3.fromRGB(40,40,50),
    ToggleOn = Color3.fromRGB(180,0,255),
    ToggleOff = Color3.fromRGB(70,70,80),
    Text = Color3.fromRGB(235,235,235),
    Corner = 10,
    WindowSize = UDim2.new(0, 360, 0, 260)
}

-- Helper to create instances
local function new(class, props)
    local obj = Instance.new(class)
    if props then
        for k,v in pairs(props) do
            if k == "Parent" then obj.Parent = v else pcall(function() obj[k] = v end) end
        end
    end
    return obj
end

-- Notification
function GabGuiNotify(data)
    local title = data.Title or "Notification"
    local content = data.Content or ""
    local duration = data.Duration or 3
    local gui = new("ScreenGui",{Parent=PlayerGui, ResetOnSpawn=false})
    local root = new("Frame",{Parent=gui, Size=UDim2.new(0,280,0,64), Position=UDim2.new(1,-300,0,24), BackgroundColor3=THEME.Header, BorderSizePixel=0})
    new("UICorner",{Parent=root, CornerRadius=UDim.new(0,8)})
    new("UIStroke",{Parent=root, Color=THEME.Accent, Thickness=1})
    new("TextLabel",{Parent=root, Position=UDim2.new(0,12,0,6), Size=UDim2.new(1,-24,0,20), BackgroundTransparency=1, Text=title, Font=Enum.Font.GothamBold, TextSize=16, TextColor3=THEME.Text, TextXAlignment=Enum.TextXAlignment.Left})
    new("TextLabel",{Parent=root, Position=UDim2.new(0,12,0,26), Size=UDim2.new(1,-24,0,30), BackgroundTransparency=1, Text=content, Font=Enum.Font.Gotham, TextSize=14, TextColor3=THEME.Text, TextWrapped=true, TextXAlignment=Enum.TextXAlignment.Left})
    task.delay(duration,function() pcall(function() gui:Destroy() end) end)
end

-- GabGui library
local GabGui = {}
GabGui.__index = GabGui

function GabGui:CreateWindow(opts)
    opts = opts or {}
    local name = opts.Name or "GabGui Window"
    local size = opts.Size or THEME.WindowSize
    local pos = opts.Position or UDim2.new(0.5, -size.X.Offset/2, 0.5, -size.Y.Offset/2)
    local ScreenGui = new("ScreenGui",{Parent=PlayerGui, ResetOnSpawn=false, Name="GabGui_"..tostring(name)})
    ScreenGui.IgnoreGuiInset = true

    local frame = new("Frame",{Parent=ScreenGui, Size=size, Position=pos, BackgroundColor3=THEME.Background, BorderSizePixel=0})
    frame.Active = true
    frame.Draggable = true
    new("UICorner",{Parent=frame, CornerRadius=UDim.new(0, THEME.Corner)})
    new("UIStroke",{Parent=frame, Color=THEME.Accent, Thickness=2})

    local header = new("Frame",{Parent=frame, Size=UDim2.new(1,0,0,34), BackgroundColor3=THEME.Header})
    new("UICorner",{Parent=header, CornerRadius=UDim.new(0, THEME.Corner)})
    local titleLabel = new("TextLabel",{Parent=header, Text=name, BackgroundTransparency=1, TextColor3=THEME.Text, Font=Enum.Font.GothamBold, TextSize=16, Position=UDim2.new(0,12,0,0), Size=UDim2.new(1,-40,1,0), TextXAlignment=Enum.TextXAlignment.Left})
    local closeBtn = new("TextButton",{Parent=header, Text="√ó", Size=UDim2.new(0,34,1,0), Position=UDim2.new(1,-34,0,0), BackgroundTransparency=1, TextColor3=Color3.fromRGB(255,100,100), Font=Enum.Font.GothamBold, TextSize=22})
    closeBtn.MouseButton1Click:Connect(function() frame.Visible = false end)

    local tabBar = new("ScrollingFrame",{Parent=frame, Size=UDim2.new(1,-10,0,36), Position=UDim2.new(0,5,0,38), BackgroundTransparency=1, ScrollBarThickness=6, CanvasSize=UDim2.new(0,0,0,0), ScrollingDirection=Enum.ScrollingDirection.X})
    tabBar.AutomaticCanvasSize = Enum.AutomaticSize.X
    tabBar.ScrollBarImageColor3 = THEME.Accent
    tabBar.ScrollBarImageTransparency = 0.5
    local tabList = new("UIListLayout",{Parent=tabBar})
    tabList.FillDirection = Enum.FillDirection.Horizontal
    tabList.Padding = UDim.new(0,6)
    tabList.HorizontalAlignment = Enum.HorizontalAlignment.Left

    local contentHolder = new("Frame",{Parent=frame, Size=UDim2.new(1,-10,1,-84), Position=UDim2.new(0,5,0,78), BackgroundTransparency=1})

    local WindowObj = {}
    WindowObj._tabs = {}
    WindowObj.ActiveTab = nil

    function WindowObj:CreateTab(title, icon)
        local tabBtn = new("TextButton",{Parent=tabBar, Size=UDim2.new(0,110,1,0), BackgroundColor3=THEME.Button, Text=title, Font=Enum.Font.GothamSemibold, TextSize=14, TextColor3=THEME.Text})
        new("UICorner",{Parent=tabBtn, CornerRadius=UDim.new(0,8)})
        local tabPanel = new("ScrollingFrame",{Parent=contentHolder, Size=UDim2.new(1,0,1,0), Position=UDim2.new(0,0,0,0), CanvasSize=UDim2.new(0,0,0,0), BackgroundTransparency=1, ScrollBarThickness=6})
        tabPanel.AutomaticCanvasSize = Enum.AutomaticSize.Y
        tabPanel.Visible = false
        local layout = new("UIListLayout",{Parent=tabPanel, Padding=UDim.new(0,8), SortOrder=Enum.SortOrder.LayoutOrder})

        tabBtn.MouseButton1Click:Connect(function()
            for _,t in ipairs(WindowObj._tabs) do
                t.Panel.Visible = false
                t.Button.BackgroundColor3 = THEME.Button
            end
            tabPanel.Visible = true
            tabBtn.BackgroundColor3 = THEME.Accent
            WindowObj.ActiveTab = title
        end)

        if #WindowObj._tabs == 0 then
            tabPanel.Visible = true
            tabBtn.BackgroundColor3 = THEME.Accent
            WindowObj.ActiveTab = title
        end

        local TabObj = {}
        TabObj.Button = tabBtn
        TabObj.Panel = tabPanel

        -- Section
        function TabObj:CreateSection(title)
            local sec = new("Frame",{Parent=tabPanel, Size=UDim2.new(1, -20, 0, 26), BackgroundTransparency=1})
            new("TextLabel",{Parent=sec, Text=title or "", BackgroundTransparency=1, TextColor3=THEME.Text, Font=Enum.Font.GothamBold, TextSize=15, Size=UDim2.new(1,0,1,0), TextXAlignment=Enum.TextXAlignment.Left})
            return TabObj
        end

        -- Button
function TabObj:CreateButton(data)
    data = data or {}

    local btn = Instance.new("TextButton")
    btn.Parent = tabPanel
    btn.Size = UDim2.new(1, -20, 0, 36)
    btn.BackgroundColor3 = THEME.Button
    btn.Text = "  " .. (data.Name or "Button")
    btn.TextXAlignment = Enum.TextXAlignment.Left
    btn.Font = Enum.Font.Gotham
    btn.TextSize = 14
    btn.TextColor3 = THEME.Text
    btn.AutoButtonColor = false

    -- üü£ Rounded corners
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 8)
    corner.Parent = btn

    -- üü£ Purple outline (Rayfield-style)
    local stroke = Instance.new("UIStroke")
    stroke.Parent = btn
    stroke.Color = Color3.fromRGB(170, 0, 255)
    stroke.Thickness = 1.6
    stroke.Transparency = 0
    stroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border

    -- ‚ö†Ô∏è Click + callback safety
    btn.MouseButton1Click:Connect(function()
        local ok, err = pcall(function()
            if data.Callback then
                data.Callback()
            end
        end)
        if not ok then
            warn("[GabGui] Button callback error: " .. tostring(err))
            btn.BackgroundColor3 = Color3.fromRGB(85, 0, 0)
            task.wait(0.2)
            btn.BackgroundColor3 = THEME.Button
        end
    end)

    return btn
end

        -- Toggle
function TabObj:CreateToggle(data)
	    data = data or {}
	    local name = data.Name or "Toggle"
	    local state = data.CurrentValue or false
	
	    -- Main container
	    local container = new("Frame", {
	        Parent = tabPanel,
	        Size = UDim2.new(1, -20, 0, 36),
	        BackgroundColor3 = THEME.Button,
	        BackgroundTransparency = 1,
	        BorderSizePixel = 0,
	        ClipsDescendants = false
	    })
	    new("UICorner", {Parent = container, CornerRadius = UDim.new(0, 8)})
	
	    -- Main container glow outline
	    local containerStroke = new("UIStroke", {
	        Parent = container,
	        Color = Color3.fromRGB(170, 0, 255),
	        Transparency = 0.2,
	        Thickness = 1.3
	    })
	
	    -- Purple cover-flow glow behind container
	    local glow = new("Frame", {
	        Parent = container,
	        Size = UDim2.new(1, 12, 1, 12),
	        Position = UDim2.new(0, -6, 0, -6),
	        BackgroundColor3 = Color3.fromRGB(180, 120, 255),
	        BackgroundTransparency = 0.6,
	        ZIndex = container.ZIndex - 1,
	        BorderSizePixel = 0
	    })
	    new("UICorner", {Parent = glow, CornerRadius = UDim.new(0, 8)})
	
	    -- Label
	    local label = new("TextLabel", {
	        Parent = container,
	        Position = UDim2.new(0, 8, 0, 0),
	        Size = UDim2.new(0.7, 0, 1, 0),
	        BackgroundTransparency = 1,
	        Text = name,
	        TextXAlignment = Enum.TextXAlignment.Left,
	        TextColor3 = THEME.Text,
	        Font = Enum.Font.Gotham,
	        TextSize = 14,
	        TextTransparency = 1
	    })
	
	    -- Switch & knob
	    local switch = new("Frame", {
	        Parent = container,
	        Size = UDim2.new(0, 46, 0, 24),
	        Position = UDim2.new(1, -56, 0.5, -12),
	        BackgroundColor3 = THEME.ToggleOff,
	        BorderSizePixel = 0
	    })
	    new("UICorner", {Parent = switch, CornerRadius = UDim.new(1, 0)}) -- Fully rounded switch
	
	    local knob = new("Frame", {
	        Parent = switch,
	        Size = UDim2.new(0, 20, 0, 20),
	        Position = UDim2.new(0, 2, 0, 2),
	        BackgroundColor3 = Color3.fromRGB(240, 240, 240)
	    })
	    new("UICorner", {Parent = knob, CornerRadius = UDim.new(1, 0)}) -- Fully rounded knob
	
	    -- Switch outline (UIStroke)
	    local stroke = new("UIStroke", {
	        Parent = switch,
	        Color = Color3.fromRGB(170, 0, 255), -- Purple color
	        Transparency = 0.4,
	        Thickness = 1.3
	    })
	
	    -- Remove Outer Glow (ensure it‚Äôs not created)
	    if outerGlow then
	        outerGlow:Destroy()
	    end
	
	    -- Fade-in animation
	    TweenService:Create(container, TweenInfo.new(0.7, Enum.EasingStyle.Exponential), {BackgroundTransparency = 0}):Play()
	    TweenService:Create(label, TweenInfo.new(0.7, Enum.EasingStyle.Exponential), {TextTransparency = 0}):Play()
	    TweenService:Create(stroke, TweenInfo.new(0.7, Enum.EasingStyle.Exponential), {Transparency = 0.25}):Play()
	
	    -- Function to set toggle state
	    local function setState(s, noCb)
	        state = s
	        local pos = s and UDim2.new(1, -22, 0, 2) or UDim2.new(0, 2, 0, 2)
	        local bg = s and THEME.ToggleOn or THEME.ToggleOff
	        local strokeCol = Color3.fromRGB(170, 0, 255)
	
	        TweenService:Create(knob, TweenInfo.new(0.45, Enum.EasingStyle.Quart, Enum.EasingDirection.Out), {Position = pos}):Play()
	        TweenService:Create(switch, TweenInfo.new(0.35, Enum.EasingStyle.Exponential), {BackgroundColor3 = bg}):Play()
	        TweenService:Create(stroke, TweenInfo.new(0.55, Enum.EasingStyle.Exponential), {Color = strokeCol}):Play()
	        TweenService:Create(containerStroke, TweenInfo.new(0.5, Enum.EasingStyle.Exponential), {Transparency = s and 0.2 or 0.2}):Play()
	
	        if not noCb and data.Callback then
	            local success, err = pcall(data.Callback, state)
	            if not success then
	                TweenService:Create(container, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {BackgroundColor3 = Color3.fromRGB(255, 85, 85)}):Play()
	                task.wait(0.5)
	                TweenService:Create(container, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {BackgroundColor3 = THEME.Button}):Play()
	                warn("Toggle Callback Error: "..tostring(err))
	            end
	        end
	    end
	
	    -- Hover animation
	    container.MouseEnter:Connect(function()
	        TweenService:Create(container, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {BackgroundColor3 = Color3.fromRGB(55, 0, 110)}):Play()
	        TweenService:Create(containerStroke, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {Transparency = 0.2}):Play()
	    end)
	    container.MouseLeave:Connect(function()
	        TweenService:Create(container, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {BackgroundColor3 = THEME.Button}):Play()
	        TweenService:Create(containerStroke, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {Transparency = state and 0.2 or 0.2}):Play()
	    end)
	
	    -- Click toggle
	    switch.InputBegan:Connect(function(i)
	        if i.UserInputType == Enum.UserInputType.MouseButton1 or i.UserInputType == Enum.UserInputType.Touch then
	            setState(not state)
	        end
	    end)
	
	    -- Initialize state
	    setState(state, true)
	
	    return {
	        Set = function(_, v) setState(v) end,
	        Get = function() return state end
	    }
	end
	
	
        -- Slider
	function TabObj:CreateSlider(SliderSettings)
			    local TweenService = game:GetService("TweenService")
			    local UserInputService = game:GetService("UserInputService")
			
			    SliderSettings = SliderSettings or {}
			    local name = SliderSettings.Name or "Slider"
			    local min = (SliderSettings.Range and SliderSettings.Range[1]) or 0
			    local max = (SliderSettings.Range and SliderSettings.Range[2]) or 100
			    local inc = SliderSettings.Increment or 1
			    local cur = SliderSettings.CurrentValue or min
			    local suffix = SliderSettings.Suffix or ""
			    local dragging = false
			
			    -- Purple dark container
			    local container = new("Frame", {
			        Parent = tabPanel,
			        Size = UDim2.new(1, -20, 0, 48),
			        BackgroundColor3 = Color3.fromRGB(40,40,50),
			        BorderSizePixel = 0
			    })
			    new("UICorner", {Parent = container, CornerRadius = UDim.new(0, 8)})
			    local stroke = new("UIStroke", {
			        Parent = container,
			        Color = Color3.fromRGB(170, 0, 255),
			        Transparency = 0.3,
			        Thickness = 1.4
			    })
			
			    local label = new("TextLabel", {
			        Parent = container,
			        Size = UDim2.new(1, 0, 0, 18),
			        Position = UDim2.new(0, 0, 0, 4),
			        BackgroundTransparency = 1,
			        Text = name .. " : " .. tostring(cur) .. (suffix ~= "" and " " .. suffix or ""),
			        TextColor3 = THEME.Text,
			        Font = Enum.Font.Gotham,
			        TextSize = 14,
			        TextXAlignment = Enum.TextXAlignment.Left
			    })
			
			    local track = new("Frame", {
			        Parent = container,
			        Size = UDim2.new(1, -32, 0, 10),
			        Position = UDim2.new(0, 16, 0, 30),
			        BackgroundColor3 = Color3.fromRGB(50, 0, 90),
			        BorderSizePixel = 0
			    })
			    new("UICorner", {Parent = track, CornerRadius = UDim.new(0, 6)})
			    new("UIStroke", {
			        Parent = track,
			        Color = Color3.fromRGB(120, 0, 200),
			        Transparency = 0.5
			    })
			
			    local fill = new("Frame", {
			        Parent = track,
			        Size = UDim2.new((cur - min) / (max - min), 0, 1, 0),
			        BackgroundColor3 = Color3.fromRGB(170, 0, 255),
			        BorderSizePixel = 0
			    })
			    new("UICorner", {Parent = fill, CornerRadius = UDim.new(0, 6)})
			    local fillStroke = new("UIStroke", {
			        Parent = fill,
			        Color = Color3.fromRGB(180, 0, 255),
			        Transparency = 0.2
			    })
			
			    -- Set value function
			    local function setFromX(x)
			        local rel = math.clamp((x - track.AbsolutePosition.X) / track.AbsoluteSize.X, 0, 1)
			        local raw = min + rel * (max - min)
			        local stepped = math.floor((raw - min) / inc + 0.5) * inc + min
			        stepped = math.clamp(stepped, min, max)
			        cur = stepped
			
			        TweenService:Create(fill, TweenInfo.new(0.25, Enum.EasingStyle.Exponential), {
			            Size = UDim2.new((stepped - min) / (max - min), 0, 1, 0)
			        }):Play()
			
			        label.Text = name .. " : " .. tostring(stepped) .. (suffix ~= "" and " " .. suffix or "")
			
			        if SliderSettings.Callback then
			            local ok, err = pcall(SliderSettings.Callback, stepped)
			            if not ok then
			                -- Red flash error animation
			                TweenService:Create(container, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {BackgroundColor3 = Color3.fromRGB(85, 0, 0)}):Play()
			                task.wait(0.25)
			                TweenService:Create(container, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {BackgroundColor3 = Color3.fromRGB(25, 0, 45)}):Play()
			                warn("[GabGui] Slider '" .. name .. "' callback error: " .. tostring(err))
			            end
			        end
			    end
			
			    -- Hover effect
			    container.MouseEnter:Connect(function()
			        TweenService:Create(container, TweenInfo.new(0.4, Enum.EasingStyle.Exponential), {BackgroundColor3 = Color3.fromRGB(35, 0, 70)}):Play()
			    end)
			    container.MouseLeave:Connect(function()
			        TweenService:Create(container, TweenInfo.new(0.4, Enum.EasingStyle.Exponential), {BackgroundColor3 = Color3.fromRGB(25, 0, 45)}):Play()
			    end)
			
			    -- Drag logic
			    track.InputBegan:Connect(function(i)
			        if i.UserInputType == Enum.UserInputType.MouseButton1 or i.UserInputType == Enum.UserInputType.Touch then
			            dragging = true
			            setFromX(i.Position.X)
			            TweenService:Create(fillStroke, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {Transparency = 0}):Play()
			        end
			    end)
			
			    UserInputService.InputEnded:Connect(function(i)
			        if i.UserInputType == Enum.UserInputType.MouseButton1 or i.UserInputType == Enum.UserInputType.Touch then
			            dragging = false
			            TweenService:Create(fillStroke, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {Transparency = 0.2}):Play()
			        end
			    end)
			
			    UserInputService.InputChanged:Connect(function(i)
			        if dragging and (i.UserInputType == Enum.UserInputType.MouseMovement or i.UserInputType == Enum.UserInputType.Touch) then
			            setFromX(i.Position.X)
			        end
			    end)
			
			    -- External control
			    return {
			        Set = function(_, v)
			            if type(v) == "number" then
			                v = math.clamp(v, min, max)
			                cur = v
			                TweenService:Create(fill, TweenInfo.new(0.25, Enum.EasingStyle.Exponential), {
			                    Size = UDim2.new((v - min) / (max - min), 0, 1, 0)
			                }):Play()
			                label.Text = name .. " : " .. tostring(v) .. (suffix ~= "" and " " .. suffix or "")
			                if SliderSettings.Callback then pcall(SliderSettings.Callback, v) end
			            end
			        end,
			        Get = function() return cur end
			    }
			end

        -- Input Box
function TabObj:CreateInput(data)
				data = data or {}
				local name = data.Name or "Input"
				local placeholder = data.PlaceholderText or "Type here..."
				local curVal = data.CurrentValue or ""
				local callback = data.Callback
			
				-- Container (the whole input element)
				local container = Instance.new("Frame")
				container.Name = name .. "_Input"
				container.Parent = tabPanel
				container.Size = UDim2.new(1, -20, 0, 36)
				container.BackgroundColor3 = Color3.fromRGB(40,40,50)
				container.BackgroundTransparency = 1 -- fully transparent background
				container.BorderSizePixel = 0
			
				local corner = Instance.new("UICorner", container)
				corner.CornerRadius = UDim.new(0, 8)
			
				local stroke = Instance.new("UIStroke", container)
				stroke.Color = Color3.fromRGB(160, 0, 255)
				stroke.Transparency = 0.4
				stroke.Thickness = 1.2
			
				-- Label (left side text)
				local label = Instance.new("TextLabel")
				label.Parent = container
				label.BackgroundTransparency = 1
				label.Size = UDim2.new(0.4, 0, 1, 0)
				label.Text = name
				label.Font = Enum.Font.Gotham
				label.TextSize = 14
				label.TextColor3 = THEME.Text
				label.TextXAlignment = Enum.TextXAlignment.Left
			
				-- TextBox (the part you type in)
				local box = Instance.new("TextBox")
				box.Parent = container
				box.Size = UDim2.new(0.55, -8, 0.8, 0)
				box.Position = UDim2.new(0.4, 8, 0.1, 0)
				box.BackgroundTransparency = 1 -- üíú make it invisible
				box.BorderSizePixel = 0
				box.Text = curVal
				box.PlaceholderText = placeholder
				box.PlaceholderColor3 = Color3.fromRGB(160, 100, 220)
				box.TextColor3 = THEME.Text
				box.Font = Enum.Font.GothamBold
				box.TextSize = 14
				box.ClearTextOnFocus = false
				box.TextXAlignment = Enum.TextXAlignment.Left
			
				-- Optional accent line under box
				local underline = Instance.new("Frame", box)
				underline.AnchorPoint = Vector2.new(0, 1)
				underline.Position = UDim2.new(0, 0, 1, 0)
				underline.Size = UDim2.new(1, 0, 0, 2)
				underline.BackgroundColor3 = Color3.fromRGB(160, 0, 255)
				underline.BackgroundTransparency = 0.4
			
				-- Hover effect (container)
				container.MouseEnter:Connect(function()
					TweenService:Create(underline, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {BackgroundTransparency = 0}):Play()
				end)
			
				container.MouseLeave:Connect(function()
					TweenService:Create(underline, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {BackgroundTransparency = 0.4}):Play()
				end)
			
				-- Focus animation
				box.Focused:Connect(function()
					TweenService:Create(underline, TweenInfo.new(0.3), {BackgroundTransparency = 0}):Play()
					TweenService:Create(underline, TweenInfo.new(0.3), {BackgroundColor3 = Color3.fromRGB(200, 0, 255)}):Play()
				end)
			
				box.FocusLost:Connect(function(enterPressed)
					TweenService:Create(underline, TweenInfo.new(0.3), {BackgroundTransparency = 0.4}):Play()
					TweenService:Create(underline, TweenInfo.new(0.3), {BackgroundColor3 = Color3.fromRGB(160, 0, 255)}):Play()
			
					if enterPressed and callback then
						local ok, err = pcall(callback, box.Text)
						if not ok then
							warn("[GabGui] Input callback error:", err)
						end
					end
				end)
			
				-- Return object (for external control)
				local obj = {}
				function obj:Set(text)
					box.Text = text
					if callback then pcall(callback, text) end
				end
				function obj:Get()
					return box.Text
				end
			
				return obj
			end

        -- Dropdown
function TabObj:CreateDropdown(data)
		data = data or {}
		local name = data.Name or "Dropdown"
		local options = data.Options or {}
		if #options == 0 then return end
	
		local multi = data.MultipleOptions or false
		local selected = multi and {} or { data.CurrentOption or options[1] }
		local maxVisible = data.MaxVisibleOptions or 5
		local open = false
	
		-- Create main dropdown container (GabGui purple-glow style)
		local container = new("Frame", {
			Parent = tabPanel,
			Size = UDim2.new(1, -20, 0, 36),
			BackgroundColor3 = THEME.Button,
			BorderSizePixel = 0,
			ClipsDescendants = false
		})
		new("UICorner", { Parent = container, CornerRadius = UDim.new(0, 8) })
	
		-- Purple accent UIStroke
		local stroke = new("UIStroke", {
			Parent = container,
			Color = Color3.fromRGB(170, 0, 255),
			Transparency = 0.2,
			Thickness = 1.3
		})
	
		local label = new("TextLabel", {
			Parent = container,
			Size = UDim2.new(0.6, 0, 1, 0),
			BackgroundTransparency = 1,
			Text = name,
			TextXAlignment = Enum.TextXAlignment.Left,
			TextColor3 = THEME.Text,
			Font = Enum.Font.Gotham,
			TextSize = 14
		})
	
		local btn = new("TextButton", {
			Parent = container,
			Size = UDim2.new(0.4, -4, 1, 0),
			Position = UDim2.new(0.6, 4, 0, 0),
			Text = selected[1] or "None ‚ñº",
			BackgroundTransparency = 1,
			TextColor3 = THEME.Text,
			Font = Enum.Font.GothamBold,
			TextSize = 14
		})
	
		-- üîπ Dropdown list panel now uses ScrollingFrame
		local dropdownFrame = new("ScrollingFrame", {
			Parent = tabPanel,
			Size = UDim2.new(1, -20, 0, 0),
			BackgroundColor3 = THEME.Button,
			BorderSizePixel = 0,
			Visible = false,
			ScrollBarThickness = 4,
			ScrollBarImageColor3 = Color3.fromRGB(180, 120, 255),
			CanvasSize = UDim2.new(0, 0, 0, 0),
			AutomaticCanvasSize = Enum.AutomaticSize.Y,
			ClipsDescendants = true
		})
		new("UICorner", { Parent = dropdownFrame, CornerRadius = UDim.new(0, 8) })
	
		local dropStroke = new("UIStroke", {
			Parent = dropdownFrame,
			Color = Color3.fromRGB(140, 0, 255),
			Transparency = 0.4
		})
	
		local listLayout = new("UIListLayout", {
			Parent = dropdownFrame,
			Padding = UDim.new(0, 2)
		})
		listLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
			dropdownFrame.CanvasSize = UDim2.new(0, 0, 0, listLayout.AbsoluteContentSize.Y + 8)
		end)
	
		-- TweenService alias
		local TweenService = game:GetService("TweenService")
	
		-- Update button text depending on selection
		local function updateBtnText()
			if multi then
				if #selected == 0 then
					btn.Text = "None ‚ñº"
				elseif #selected == 1 then
					btn.Text = selected[1] .. " ‚ñº"
				else
					btn.Text = selected[1] .. " + " .. (#selected - 1) .. " ‚ñº"
				end
			else
				btn.Text = (selected[1] or "None") .. " ‚ñº"
			end
		end
	
		-- Create option buttons
		for _, option in ipairs(options) do
			local optBtn = new("TextButton", {
				Parent = dropdownFrame,
				Size = UDim2.new(1, 0, 0, 28),
				Text = option,
				BackgroundColor3 = THEME.Button,
				TextColor3 = THEME.Text,
				Font = Enum.Font.Gotham,
				TextSize = 14,
				BackgroundTransparency = 1
			})
			new("UICorner", { Parent = optBtn, CornerRadius = UDim.new(0, 6) })
			local optStroke = new("UIStroke", {
				Parent = optBtn,
				Color = Color3.fromRGB(150, 0, 255),
				Transparency = 1
			})
	
			-- Hover effect (gentle glow)
			optBtn.MouseEnter:Connect(function()
				TweenService:Create(optBtn, TweenInfo.new(0.25, Enum.EasingStyle.Exponential), {
					BackgroundColor3 = Color3.fromRGB(60, 0, 100)
				}):Play()
				TweenService:Create(optStroke, TweenInfo.new(0.25, Enum.EasingStyle.Exponential), {
					Transparency = 0.2
				}):Play()
			end)
			optBtn.MouseLeave:Connect(function()
				TweenService:Create(optBtn, TweenInfo.new(0.25, Enum.EasingStyle.Exponential), {
					BackgroundColor3 = THEME.Button
				}):Play()
				TweenService:Create(optStroke, TweenInfo.new(0.25, Enum.EasingStyle.Exponential), {
					Transparency = 1
				}):Play()
			end)
	
			-- Click logic + color tween
			optBtn.MouseButton1Click:Connect(function()
				if multi then
					local found = table.find(selected, option)
					if found then
						table.remove(selected, found)
					else
						table.insert(selected, option)
					end
				else
					selected = { option }
					open = false
					TweenService:Create(dropdownFrame, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {
						Size = UDim2.new(1, -20, 0, 0)
					}):Play()
					task.wait(0.25)
					dropdownFrame.Visible = false
				end
	
				updateBtnText()
				for _, b in ipairs(dropdownFrame:GetChildren()) do
					if b:IsA("TextButton") then
						local selectedState = table.find(selected, b.Text)
						local colorGoal = selectedState and Color3.fromRGB(180, 120, 255) or THEME.Button
						local strokeGoal = selectedState and 0.2 or 1
						TweenService:Create(b, TweenInfo.new(0.25, Enum.EasingStyle.Exponential), {
							BackgroundColor3 = colorGoal
						}):Play()
						TweenService:Create(b.UIStroke, TweenInfo.new(0.25, Enum.EasingStyle.Exponential), {
							Transparency = strokeGoal
						}):Play()
					end
				end
				if data.Callback then pcall(data.Callback, multi and selected or selected[1]) end
			end)
		end
	
		-- Open / Close dropdown (Rayfield-style fade + resize)
		btn.MouseButton1Click:Connect(function()
			open = not open
			if open then
				dropdownFrame.Visible = true
				local totalHeight = math.min(#options, maxVisible) * 30 + 6
				TweenService:Create(container, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {
					BackgroundColor3 = Color3.fromRGB(50, 0, 90)
				}):Play()
				TweenService:Create(stroke, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {
					Transparency = 0
				}):Play()
				TweenService:Create(dropdownFrame, TweenInfo.new(0.5, Enum.EasingStyle.Exponential), {
					Size = UDim2.new(1, -20, 0, totalHeight)
				}):Play()
			else
				TweenService:Create(dropdownFrame, TweenInfo.new(0.5, Enum.EasingStyle.Exponential), {
					Size = UDim2.new(1, -20, 0, 0)
				}):Play()
				task.wait(0.35)
				dropdownFrame.Visible = false
				TweenService:Create(container, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {
					BackgroundColor3 = THEME.Button
				}):Play()
				TweenService:Create(stroke, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {
					Transparency = 0.2
				}):Play()
			end
		end)
	
		return {
			Get = function()
				return multi and selected or selected[1]
			end,
			Set = function(_, v)
				selected = multi and v or { v }
				updateBtnText()
			end
		}
	end

-- Keybind
function TabObj:CreateKeybind(data)
		data = data or {}
		local name = data.Name or "Keybind"
		local key = data.CurrentKeybind or "Q"
		local hold = data.HoldToInteract or false
	
		local TweenService = game:GetService("TweenService")
		local UserInputService = game:GetService("UserInputService")
		local RunService = game:GetService("RunService")
	
		local container = new("Frame", {
			Parent = tabPanel,
			Size = UDim2.new(1, -20, 0, 36),
			BackgroundColor3 = THEME.Button,
			BackgroundTransparency = 1,
			BorderSizePixel = 0
		})
		new("UICorner", { Parent = container, CornerRadius = UDim.new(0, 8) })
		local stroke = new("UIStroke", {
			Parent = container,
			Color = Color3.fromRGB(170, 0, 255),
			Transparency = 1,
			Thickness = 1.3
		})
	
		local label = new("TextLabel", {
			Parent = container,
			Position = UDim2.new(0, 8, 0, 0),
			Size = UDim2.new(0.7, 0, 1, 0),
			BackgroundTransparency = 1,
			Text = name,
			TextXAlignment = Enum.TextXAlignment.Left,
			TextColor3 = THEME.Text,
			Font = Enum.Font.Gotham,
			TextSize = 14,
			TextTransparency = 1
		})
	
		-- üîπ Fully transparent TextBox for typing/pressing keys
		local box = new("TextBox", {
			Parent = container,
			Size = UDim2.new(0.3, -8, 1, 0),
			Position = UDim2.new(0.7, 4, 0, 0),
			Text = key,
			PlaceholderText = "",
			ClearTextOnFocus = false,
			BackgroundTransparency = 9999, -- completely invisible
			TextColor3 = THEME.Text,
			Font = Enum.Font.GothamBold,
			TextSize = 14
		})
	
		local boxStroke = new("UIStroke", {
			Parent = box,
			Color = Color3.fromRGB(150, 0, 255),
			Transparency = 1
		})
	
		-- Fade-in animation
		TweenService:Create(container, TweenInfo.new(0.7, Enum.EasingStyle.Exponential), { BackgroundTransparency = 0 }):Play()
		TweenService:Create(stroke, TweenInfo.new(0.7, Enum.EasingStyle.Exponential), { Transparency = 0.25 }):Play()
		TweenService:Create(label, TweenInfo.new(0.7, Enum.EasingStyle.Exponential), { TextTransparency = 0 }):Play()
		TweenService:Create(boxStroke, TweenInfo.new(0.7, Enum.EasingStyle.Exponential), { Transparency = 0.4 }):Play()
	
		-- Hover glow
		container.MouseEnter:Connect(function()
			TweenService:Create(container, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {
				BackgroundColor3 = Color3.fromRGB(55, 0, 110)
			}):Play()
		end)
		container.MouseLeave:Connect(function()
			TweenService:Create(container, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {
				BackgroundColor3 = THEME.Button
			}):Play()
		end)
	
		-- Focus effects
		box.Focused:Connect(function()
			TweenService:Create(boxStroke, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), { Transparency = 0 }):Play()
			TweenService:Create(container, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {
				BackgroundColor3 = Color3.fromRGB(70, 0, 130)
			}):Play()
		end)
		box.FocusLost:Connect(function()
			TweenService:Create(boxStroke, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), { Transparency = 0.4 }):Play()
			TweenService:Create(container, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {
				BackgroundColor3 = THEME.Button
			}):Play()
	
			if box.Text ~= "" then
				key = string.upper(box.Text)
				if data.Callback then pcall(data.Callback, key) end
			end
		end)
	
		-- Press detection (still works even if you type manually)
		UserInputService.InputBegan:Connect(function(input, gp)
			if gp then return end
	
			if box:IsFocused() then
				if input.UserInputType == Enum.UserInputType.Keyboard and input.KeyCode ~= Enum.KeyCode.Unknown then
					key = input.KeyCode.Name
					box.Text = key
					box:ReleaseFocus()
					TweenService:Create(box, TweenInfo.new(0.25, Enum.EasingStyle.Exponential), { TextColor3 = Color3.fromRGB(200, 150, 255) }):Play()
					task.delay(0.25, function()
						TweenService:Create(box, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), { TextColor3 = THEME.Text }):Play()
					end)
					if data.Callback then pcall(data.Callback, key) end
				end
			elseif input.UserInputType == Enum.UserInputType.Keyboard then
				if input.KeyCode.Name == key then
					if hold then
						local held = true
						local conn; conn = input.Changed:Connect(function(prop)
							if prop == "UserInputState" then
								conn:Disconnect()
								held = false
								if data.Callback then pcall(data.Callback, false) end
							end
						end)
						while held do
							if data.Callback then pcall(data.Callback, true) end
							RunService.Stepped:Wait()
						end
					else
						if data.Callback then pcall(data.Callback, key) end
					end
				end
			end
		end)
	
		return {
			Get = function()
				return key
			end,
			Set = function(_, v)
				key = v
				box.Text = v
			end
		}
	end

-- Label
function TabObj:CreateLabel(text,color,font,bold)
    local lbl = new("TextLabel",{Parent=tabPanel, Size=UDim2.new(1,-20,0,28), BackgroundTransparency=1, Text=text or "", TextColor3=color or THEME.Text, Font=font or Enum.Font.Gotham, TextSize=14, TextXAlignment=Enum.TextXAlignment.Left})
    return lbl
end

-- Paragraph
function TabObj:CreateParagraph(data)
		    data = data or {}
		    local titleText = data.Title or "Paragraph Title"
		    local contentText = data.Content or "Paragraph content here."
		
		    -- Create the main paragraph frame
		    local frame = new("Frame", {
		        Parent = tabPanel,
		        BackgroundColor3 = THEME.Button,
		        Size = UDim2.new(1, -20, 0, 0), -- auto-size later
		        BorderSizePixel = 0
		    })
		
		    -- Purple outline
		    new("UIStroke", {
		        Parent = frame,
		        Color = THEME.Accent,
		        Thickness = 1.8
		    })
		
		    -- Rounded corners
		    new("UICorner", {
		        Parent = frame,
		        CornerRadius = UDim.new(0, 8)
		    })
		
		    -- Title
		    local title = new("TextLabel", {
		        Parent = frame,
		        Size = UDim2.new(1, -10, 0, 18),
		        Position = UDim2.new(0, 8, 0, 5),
		        BackgroundTransparency = 1,
		        Font = Enum.Font.GothamBold,
		        Text = titleText,
		        TextColor3 = THEME.Text,
		        TextXAlignment = Enum.TextXAlignment.Left,
		        TextSize = 14
		    })
		
		    -- Content
		    local content = new("TextLabel", {
		        Parent = frame,
		        Size = UDim2.new(1, -16, 0, 0),
		        Position = UDim2.new(0, 8, 0, 24),
		        BackgroundTransparency = 1,
		        Font = Enum.Font.Gotham,
		        Text = contentText,
		        TextColor3 = THEME.Text,
		        TextWrapped = true,
		        TextXAlignment = Enum.TextXAlignment.Left,
		        TextSize = 14
		    })
		
		    -- Auto-size the frame to fit text
		    local function resize()
		        local textService = game:GetService("TextService")
		        local textSize = textService:GetTextSize(content.Text, content.TextSize, content.Font, Vector2.new(frame.AbsoluteSize.X - 20, math.huge))
		        frame.Size = UDim2.new(1, -20, 0, textSize.Y + 35)
		        content.Size = UDim2.new(1, -16, 0, textSize.Y)
		    end
		
		    resize()
		    content:GetPropertyChangedSignal("Text"):Connect(resize)
		
		    -- Support Paragraph:Set({...})
		    local ParagraphObj = {
		        Set = function(self, newData)
		            if newData.Title then
		                if title then
		                    title.Text = newData.Title
		                else
		                    warn("Title is nil")
		                end
		            end
		
		            if newData.Content then
		                if content then
		                    content.Text = newData.Content
		                    task.defer(function()
		                        local textService = game:GetService("TextService")
		                        local textSize = textService:GetTextSize(
		                            content.Text,
		                            content.TextSize,
		                            content.Font,
		                            Vector2.new(frame.AbsoluteSize.X - 16, math.huge)
		                        )
		                        content.Size = UDim2.new(1, -16, 0, textSize.Y)
		                        frame.Size = UDim2.new(1, -20, 0, textSize.Y + 35)
		                    end)
		                else
		                    warn("Content is nil")
		                end
		            end
		        end
		    }
		
		    return ParagraphObj
		end
		
		

table.insert(WindowObj._tabs, TabObj)
return TabObj
end

-- Notification function
function WindowObj:Notify(data)
    GabGuiNotify(data)
end

return WindowObj
end

-- Expose notification globally
GabGui.Notify = GabGuiNotify

-- Return the library
return GabGui
