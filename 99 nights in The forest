local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "Roblox_2025RYB",
   Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
   LoadingTitle = "INITIATING",
   LoadingSubtitle = "By Luis Gabriel Torcuator",
   ShowText = "Script", -- for mobile users to unhide rayfield, change if you'd like
   Theme = "Default", -- Check https://docs.sirius.menu/rayfield/configuration/themes

   ToggleUIKeybind = "K", -- The keybind to toggle the UI visibility (string like "K" or Enum.KeyCode)

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "[99 Nights in the forest] Script By Gab tv"
   },

   Discord = {
      Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },

   KeySystem = false, -- Set this to true to use our key system
   KeySettings = {
      Title = "Security",
      Subtitle = "Key System",
      Note = "authorized Account Only", -- Use this to tell the user how to get a key
      FileName = "99nightsintheforestbygabtv", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"FREE_0943ddafe2557d1670e35ddd653f863f"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

-- // Locals
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UIS = game:GetService("UserInputService")
local VirtualInput = game:GetService("VirtualInputManager")

local player = Players.LocalPlayer
local char = player.Character or player.CharacterAdded:Wait()
local hrp = char:WaitForChild("HumanoidRootPart")

local originalPositions = {}
local autofarm = false
local currentTrunk
local followConn
local autoClick = false
local clickLoop

-- // Function 

local function getSmallTreeTrunk()
    for _, tree in pairs(workspace.Map.Foliage:GetChildren()) do
        if tree.Name == "Small Tree" and tree:FindFirstChild("Trunk") then
            return tree.Trunk
        end
    end
end

local function startFollowing(trunk)
    if not trunk then return end

    if not originalPositions[trunk] then
        originalPositions[trunk] = trunk.CFrame
    end
    
    hrp.Anchored = true
    

    followConn = RunService.RenderStepped:Connect(function()
        local forward = hrp.CFrame.LookVector * 2
        trunk.CFrame = CFrame.new(hrp.Position + forward)
    end)
end

-- stop following and restore
local function stopFollowing(trunk)
    if followConn then
        followConn:Disconnect()
        followConn = nil
    end
    if trunk and originalPositions[trunk] then
        trunk.CFrame = originalPositions[trunk]
        hrp.Anchored = false
        originalPositions[trunk] = nil
    end
end

-- toggle autofarm
local function AutoChpTree(state)
    autofarm = state -- true = ON, false = OFF

    if autofarm then
        currentTrunk = getSmallTreeTrunk()
        if currentTrunk then
            startFollowing(currentTrunk)
        end
    else
        stopFollowing(currentTrunk)
        currentTrunk = nil
    end
end

local function setAutoClick(state)
	if autoClick == state then return end -- no change
	autoClick = state

	if state then
		print("âœ… Auto Click: ON")
		clickLoop = task.spawn(function()
			while autoClick do
				VirtualInput:SendMouseButtonEvent(0, 0, 0, true, game, 0)  -- M1 down
				VirtualInput:SendMouseButtonEvent(0, 0, 0, false, game, 0) -- M1 up
				task.wait(0.1) -- speed (0.1s = 10 CPS)
			end
		end)
	else
		if clickLoop then
			task.cancel(clickLoop)
			clickLoop = nil
		end
	end
end

local Info = Window:CreateTab("Information", 4483362458) -- Main functions
local Main = Window:CreateTab("Main", 4483362458)
local Section = Main:CreateSection("Tree")
local Toggle = Main:CreateToggle({
   Name = "Auto Chop Tree",
   CurrentValue = false,
   Flag = "FarmTree", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
	AutoChpTree(Value)
	setAutoClick(Value)
   end,
})
local Section = Main:CreateSection("Kill")
local Section = Main:CreateSection("Bring Item")
local Section = Main:CreateSection("Chest")
local Section = Main:CreateSection("Map")
local Player = Window:CreateTab("Player", 4483362458)
local Visuals = Window:CreateTab("Visuals", 4483362458)
local Setting = Window:CreateTab("Setting", 4483362458)




